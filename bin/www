#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('remotediag:server');
var http = require('http');
var randomData = require('../utils/random');
var diag = require('../utils/diagnasis');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io')(server);

var initData = [];
var data = [];
var new_data = [];
var error_log = [];
var diagRes = diag();
for (var i = 0; i < 1000; i++) {
  initData.push(randomData());
}

var producerTimer = setInterval(function() {
  data.push(randomData());
}, 200);

var consumerTimer = setInterval(function() {
  diagRes = diag();
  if(diagRes!==0) error_log.push({
    error: diagRes,
    time: new Date().toLocaleString()
  });
  if(error_log.length>50) error_log.unshift();
  if(data.length>=5) {
    initData.splice(0, 5);
    new_data = data.splice(0, 5);
    initData = initData.concat(new_data);
  } else {
    new_data = [];
  }
  
}, 1000);

io.on('connection', function(socket) {
  console.log('建立连接');
  var timer = null;

  socket.on('disconnect', function() {
    console.log('断开连接');
    clearInterval(timer);
  });
  // 首次连接发送所有信息
  socket.on('first_connect', function() {
    socket.send({
      chart: initData,
      diagRes: diagRes,
      error_log: error_log
    }, function() {
      // 初始化后更新数据
      console.log('初始化成功');
      timer = setInterval(function() {
        if(new_data.length) socket.emit('update_data', { chart: new_data, diagRes: diagRes });
      }, 1000);
    });
  });
})
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
